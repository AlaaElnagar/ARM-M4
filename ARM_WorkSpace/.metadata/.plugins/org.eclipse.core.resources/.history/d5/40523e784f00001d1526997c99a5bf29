/*
 * HTMU_Program.c
 *
 *  Created on: Jul 10, 2022
 *      Author: Ahmed Khaled Hammad
 */

#include "LSTD_TYPES.h"
#include "LBIT_MATH.h"

#include "MSYSTICK_Interface.h"

#include "HTMU_Config.h"
#include "HTMU_Private.h"
#include "HTMU_Interface.h"


/*Create Task*/
void HTMU_voidCreateTask(u8 Copy_TaskID,u16 Copy_u16TaskPeriodicity , void(*Fptr)(void))
{
    Task_Array[Copy_TaskID].Periodicity= Copy_u16TaskPeriodicity ;
    Task_Array[Copy_TaskID].FuncPtr= Fptr ;

}

/*Start Scheduling*/
void HTMU_voidStart(void)
{
  /*initialize Systick to determine tick time */
  MSTK_voidInit() ;
  /*set Call Back Function */
  MSTK_voidSetCallBack(Scheduler);
  /*Enable interrupt*/
  MSTK_voidINTStatus(MSTK_INT_EN);
  /*when HSI=16Mhz , system tick is 1ms*/
   MSTK_voidStart(500) ;
}

/*determine the Task order*/
static void Scheduler(void)
{
    static u32 TickCounts = 0 ;
	for(u8 i = 0 ; i<NO_OF_TASKS ; i++)
	{
		/*chack that task isn't deleted or suspended */
		if(Task_Array[i].State == TASK_READY && Task_Array[i].FuncPtr != NULL)
		{
			/*Check until the first delay equal to zero*/
			if(Task_Array[i].firstDelay == 0)
			{
				Task_Array[i].firstDelay = Task_Array[i].Periodicity - 1 ;
				/*Invoke the task function*/
				Task_Array[i].FuncPtr() ;
			}

		}
	}
	TickCounts++ ;
}
static void SCHEDULER(void)
{
	//static u16 Local_u16TickCounter=0;
	u8 Local_u8TaskCounter;
	/*Increment of Scheduler tick counter*/

		/*Loop on the tasks*/
		for(Local_u8TaskCounter=0;Local_u8TaskCounter<NUM_OF_TASKS;Local_u8TaskCounter++)
		{
			/*chack that task isn't deleted or suspended */
			if((OStasks[Local_u8TaskCounter].TaskHandler != NULL) && (OStasks[Local_u8TaskCounter].State == TASK_READY) )
			{
				/*Check until the first delay equal to zero*/
				if(OStasks[Local_u8TaskCounter].firstDelay == 0)
				{
					OStasks[Local_u8TaskCounter].firstDelay=OStasks[Local_u8TaskCounter].Period-1;
					/*Invoke the task function*/
					OStasks[Local_u8TaskCounter].TaskHandler();
				}
				else
				{
					/*Decrement the first delay*/
					OStasks[Local_u8TaskCounter].firstDelay--;
				}
			}
			else
			{
				/*Do nothing*/
			}
		}
}
